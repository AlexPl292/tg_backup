name: Release

on:
  workflow_dispatch:

jobs:
  pre-checks:

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup environment
        run: echo "RUSTFLAGS=-D warnings" >> $GITHUB_ENV

      - name: rustfmt
        run: cargo fmt -- --check

      - name: Run tests
        run: cargo test --verbose
        env:
          TG_ID: ${{ secrets.TG_ID }}
          TG_HASH: ${{ secrets.TG_HASH }}

  build-macos:

    needs: [ pre-checks ]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build
        run: cargo build --verbose --release --target x86_64-apple-darwin
        env:
          TG_ID: ${{ secrets.TG_ID }}
          TG_HASH: ${{ secrets.TG_HASH }}

      - name: Install gon
        run: |
          brew tap mitchellh/gon
          brew install mitchellh/gon/gon

      - name: Set up certs
        env:
          APPLICATION_CERT: ${{ secrets.APPLICATION_CERT }}
          APPLICATION_CERT_PASSWORD: ${{ secrets.APPLICATION_CERT_PASSWORD }}
          KEYCHAIN_PASSWORD: passwrd
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile from secrets
          echo -n "$APPLICATION_CERT" | base64 --decode --output $CERTIFICATE_PATH

          # Create temporary keychain
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P $APPLICATION_CERT_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Gon notarizing
        env:
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
          APP_IDENTITY: ${{ secrets.APP_IDENTITY }}
        run: gon ./gon.json

  build-windows:

    needs: [ pre-checks ]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build
        run: cargo build --verbose --release --target x86_64-pc-windows-msvc
        env:
          TG_ID: ${{ secrets.TG_ID }}
          TG_HASH: ${{ secrets.TG_HASH }}

      - name: zipping
        uses: papeloto/action-zip@v1
        with:
          files: target/x86_64-pc-windows-msvc/release/tg_backup.exe
          dest: tg_backup-x86_64-pc-windows-msvc.zip

  build-linux:

    needs: [ pre-checks ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build
        run: cargo build --verbose --release --target x86_64-unknown-linux-gnu
        env:
          TG_ID: ${{ secrets.TG_ID }}
          TG_HASH: ${{ secrets.TG_HASH }}

      - name: zipping
        uses: papeloto/action-zip@v1
        with:
          files: target/x86_64-unknown-linux-gnu/release/tg_backup
          dest: tg_backup-x86_64-unknown-linux-gnu.zip
